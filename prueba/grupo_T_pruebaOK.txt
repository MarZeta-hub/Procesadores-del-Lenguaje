
 REAL re1;
 ENTERO en2 :=6; # con asignación de valor 
 BOOLEANO bo3 :=5<3; # se asigna el resultado de una expresión
 CARACTERca4:= 'h'; # variable de tipo carácter, y su literal
 
 STRUCT VECTOR2D {REAL x1; REAL x2;}
 
 STRUCT BOLA {VECTOR2D centro; REAL radio; }#definición tipo compuesto
 
 BOLA punto1; # declaración variable struct (no permite asignación al # mismo tiempo que la declaracion)
 STRUCT PALABRA {
 CARACTER l1;
 CARACTER l2;
 CARACTER l3;
 CARACTER l4;
 CARACTER l5;
 CARACTER l6;
 CARACTER l7;
 CARACTER l8;
 CARACTER l9;
 CARACTER l10;
 }
 STRUCT PERSONA {
 PALABRA nombre; 
 PALABRA apellido1; 
 PALABRA apellido1;
 ENTERO edad;
 }
 
 PERSONA alumno;
 ### Expresiones 
 5 + 6;                              # operacion 
 re1 := 3;                          # asignación simple 
 #bo3 := en2 < 7 AND 5.46 + 7 * en2 >4;     # asignación compleja 
 punto1.centro.x1 := 0.0;              # campo de variable 
 structanidadapunto1.centro.x2 := 0.0; # campo de variable 
 structanidadapunto1.radio := 10.0;   # campo de variable 
 structalumno.nombre.l1 := 'A';
 alumno.nombre.l2 := 'l';
 alumno.nombre.l3 := 'b';
 alumno.apellido2.l1 := 0;
 alumno.nombre.l4 := 'e';
 alumno.nombre.l5 := 'r';
 alumno.nombre.l6 := 't';
 alumno.nombre.l7 := 'o';
 alumno.nombre.l8 := 0;
 alumno.apellido1.l1 := 'G';
 alumno.apellido1.l2 := 'a';
 alumno.apellido1.l3 := 'r';
 alumno.apellido1.l4 := 'c';
 alumno.apellido1.l5 := 'í';
 alumno.apellido1.l6 := 'a';
 alumno.apellido1.l7 := 0;
 alumno.apellido2.l1 := 'S';
 alumno.apellido2.l2 := 'a';
 alumno.apellido2.l3 := 'n';
 alumno.apellido2.l4 := 'z';
 alumno.apellido2.l5 := 0;
 alumno.edad:=19;

 ### Sentencia de control de flujo bucle condicional 
 BULEANO seguir :=true; 

 MIENTRAS seguir AND punto1.radio > 0 # bucle condicional
   SI punto1.centro.x1 < 0 AND punto1.centro.x2 < 0 # cuerpo si condición verdadera 
     ENTONCES
     seguir := false; 
   SINO # cuerpo cuando la condición es falsa 
     Seguir := true;
   FINSI # fin de condicional 
   
   punto1.radio := punto1.radio / 2.0;
   punto1.centro.x1 := punto1.centro.x1 - 1.0;
   punto1.centro.x2 := punto1.centro.x2 - 1.0;
   
 FINMIENTRAS  

 
REAL re1, re2;
BOOLEANO bo;
CARACTER ca := 'h' ;        # variable de tipo carácter, y su literal
re1 := 5 * + 3 - 80/10;    # esta expresion debe resultar 7
re2 := 10 / 5 * re1;       # esta expresion debe resultar 4
bo := 5 < 3;               # comparación, debe resultar true

# si un número es positivo
REAL num;
BOOLEANO positivo;
SI num >= 0 ENTONCES
		positivo:= TRUE;
	SINO
		positivo:= FALSE;
	FINSI

# calculo del máximo
REAL a,b,c,max;
a:=1;
b:=2;
c:=3;
SI a>=b AND a>=c ENTONCES 
	#a es el máximo
	max:=a; 
SINO # el máximo es b o c 
	SI b>=a AND b>=c ENTONCES # b es el máximoma
		max:=b; 
	SINO # c es el máximo, por descartema
		max:=c;
	FINSI 
FINSI

  <!-- Definicion de funciones -->

  FUNCION cuadrado( REAL a ) RETURN REAL {
      a * a; 
  }  ### Sobrecarga de funciones
  FUNCION cuadrado( ENTERO e ) RETURN ENTERO{
      e * e; 
  }
   ### Funcion de dos argumentos
   FUNCION potencia( REAl a, ENTERO e ) RETURN REAL{
     REAL r := 1;
     ENTERO i := 1;
     MIENTRAS i < e
       R := r*a;
       I := i + 1;
     FINMIENTRAS
   } 
   ENTERO en2 := 6;                             # con asignación de valor 
   
   ### Expresiones 
   5 + 6; # operacion 
   re1 := 3.7;                                  # asignación simple 
   re1 := 3.7 + cuadrado(re1);                  # usando llamada a función
   re2 := potencia(re1, en2);
   
   ### Sentencia condicional de control de flujo 
   SI en2 == 3 OR bo3 AND re1                   #condicion
   ENTONCES                                     #cuerpo cuando la condición esverdadera 
  	 en2 := en2 + 3; 
   SINO                                         # cuerpo cuando la condición es falsa, llamada 
   	recursivare1 := cuadrado( cuadrado (en2));
   FINSI                                       #fin de la sentencia
    
    