  <!-- Definicion de funciones -->

   ### Funcion de dos argumentos
   FUNCION potencia( REAl a, ENTERO e ) RETURN REAL{
     REAL r := 1;
     entero e;
     real a;
     ENTERO i := 1;
     MIENTRAS i < e
       r := r * a;
       i := i + 1;
     FINMIENTRAS
   } 
    FUNCION cuadrado( REAL a ) RETURN REAL {
    real ab;
      ab * ab; 
  }  ### Sobrecarga de funciones


   ENTERO en2 := 6;                             # con asignación de valor 
   
   ### Expresiones 
   5 + 6; # operacion 
   real re1 := 3.7;                                  # asignación simple 
   re1 := 3.7 + cuadrado(re1);                  # usando llamada a función
   real re2 := potencia(re1, en2);
   buleano bo3 := false;
   
   ### Sentencia condicional de control de flujo 
   SI ((en2 == 3) OR bo3) AND re1                   #condicion
   ENTONCES                                     #cuerpo cuando la condición esverdadera 
  	 en2 := en2 + 3; 
   SINO                                         # cuerpo cuando la condición es falsa, llamada recursiva
   	re1 := cuadrado( cuadrado (en2));
   FINSI                                       #fin de la sentencia
    
    
 STRUCT VECTOR2D {
 REAL x1; 
 REAL x2;
 }
 
 STRUCT BOLA {VECTOR2D centro; REAL radio; } #definición tipo compuesto
 
 STRUCT PALABRA {
 CARACTER l1;
 CARACTER l2;
 CARACTER l3;
 CARACTER l4;
 CARACTER l5;
 CARACTER l6;
 CARACTER l7;
 CARACTER l8;
 CARACTER l9;
 CARACTER l10;
 }
 
 STRUCT PERSONA {
 PALABRA nombre; 
 PALABRA apellido1; 
 PALABRA apellido2;
 ENTERO edad;
 }
 
 BOLA punto1; # declaración variable struct (no permite asignación al # mismo tiempo que la declaracion)

 PERSONA alumno;
 
 
 
 
 
 ### Expresiones 
 5 + 6;                              # operacion 
 re1 := 3;                          # asignación simple 
 punto1.centro.x1 := 3.0;              # campo de variable 
punto1.centro.x2 := 7.0; # campo de variable 
punto1.radio := 10.0;   # campo de variable 


 alumno.nombre.l1 := 'A';
 alumno.nombre.l2 := 'l';
 alumno.nombre.l3 := 'b';
 alumno.apellido2.l1 := 0;
 alumno.nombre.l4 := 'e';
 alumno.nombre.l5 := 'r';
 alumno.nombre.l6 := 't';
 alumno.nombre.l7 := 'o';
 alumno.nombre.l8 := 0;
 alumno.apellido1.l1 := 'G';
 alumno.apellido1.l2 := 'a';
 alumno.apellido1.l3 := 'r';
 alumno.apellido1.l4 := 'c';
 alumno.apellido1.l5 := 'í';
 alumno.apellido1.l6 := 'a';
 alumno.apellido1.l7 := 0;
 alumno.apellido2.l1 := 'S';
 alumno.apellido2.l2 := 'a';
 alumno.apellido2.l3 := 'n';
 alumno.apellido2.l4 := 'z';
 alumno.apellido2.l5 := 0;
 alumno.edad:=19;

 ### Sentencia de control de flujo bucle condicional 
 BULEANO seguir :=tRue; 
 MIENTRAS seguir AND (punto1.radio > 0) # bucle condicional
   SI (punto1.centro.x1 < 0) AND (punto1.centro.x2 < 0) # cuerpo si condición verdadera 
     ENTONCES
     seguir := false; 
   SINO # cuerpo cuando la condición es falsa 
     seguir := true;
   FINSI # fin de condicional 
   
   punto1.radio := punto1.radio / 2.0;
   punto1.centro.x1 := punto1.centro.x1 - 1.0;
   punto1.centro.x2 := punto1.centro.x2 - 1.0;
   
 FINMIENTRAS  

CARACTER ca := 'h' ;       # variable de tipo carácter, y su literal
re1 := 5 * + 3 - 80/10;    # esta expresion debe resultar 7
re2 := 10 / 5 * re1;       # esta expresion debe resultar 14
bo3 := 5 < 3;               # comparación, debe resultar true

5 + 4;

# si un número es positivo
REAL num;
BULEANO positivo;
SI num <= 0  ENTONCES
	positivo := TRUE;
SINO 
 	positivo := false;
FINSI

# calculo del máximo

REAL abc,bb,cb,max;
abc:=1;
bb:=2;
cb:=3;
SI (abc >= bb) AND (abc >= cb) ENTONCES 
	#abc es el máximo
	max := abc; 
SINO # el máximo es bb o cb 
	SI (bb >= abc) AND (bb >= cb) ENTONCES     # b es el máximoma
		max:=bb; 
	SINO # cb es el máximo, por descartema
		max:=cb;
	FINSI 
FINSI