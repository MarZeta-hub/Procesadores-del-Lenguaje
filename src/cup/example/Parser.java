
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\004\000" +
    "\002\005\003\000\002\005\003\000\002\007\003\000\002" +
    "\007\003\000\002\006\004\000\002\006\004\000\002\013" +
    "\007\000\002\013\004\000\002\015\005\000\002\015\003" +
    "\000\002\014\007\000\002\017\005\000\002\017\004\000" +
    "\002\020\014\000\002\023\003\000\002\023\002\000\002" +
    "\024\006\000\002\024\004\000\002\011\007\000\002\011" +
    "\011\000\002\016\006\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\021\005\000\002\021\003\000\002\010\006\000\002" +
    "\022\005\000\002\022\003\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\003\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\003\000\002\027\005\000\002\027\005\000\002\027" +
    "\003\000\002\030\004\000\002\030\004\000\002\030\004" +
    "\000\002\030\003\000\002\031\003\000\002\031\005\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\046\002\uffff\005\023\006\015\014\010\015" +
    "\014\026\016\027\020\030\006\031\017\032\037\034\013" +
    "\035\021\037\042\040\012\050\030\051\026\052\007\053" +
    "\025\001\002\000\004\053\170\001\002\000\056\002\ufffb" +
    "\005\ufffb\006\ufffb\014\ufffb\015\ufffb\021\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\031\ufffb\032\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\050\ufffb\051\ufffb\052" +
    "\ufffb\053\ufffb\001\002\000\006\020\uffe2\053\uffe2\001\002" +
    "\000\100\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011" +
    "\uffc2\012\uffc2\014\uffc2\015\uffc2\016\uffc2\022\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\034" +
    "\uffc2\035\uffc2\037\uffc2\040\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\001" +
    "\002\000\100\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\014\uffc4\015\uffc4\016\uffc4\022\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\034\uffc4\035\uffc4\037\uffc4\040\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\001\002\000\004\002\167\001\002\000\024\005\023\006" +
    "\015\014\010\015\014\026\016\050\030\051\026\052\007" +
    "\053\056\001\002\000\004\053\141\001\002\000\024\005" +
    "\023\006\015\014\010\015\014\026\016\050\030\051\026" +
    "\052\007\053\056\001\002\000\016\014\010\015\014\050" +
    "\030\051\026\052\007\053\056\001\002\000\016\014\010" +
    "\015\014\050\030\051\026\052\007\053\056\001\002\000" +
    "\006\020\uffe0\053\uffe0\001\002\000\006\020\uffe3\053\uffe3" +
    "\001\002\000\024\005\023\006\015\014\010\015\014\026" +
    "\016\050\030\051\026\052\007\053\056\001\002\000\004" +
    "\004\131\001\002\000\016\014\010\015\014\050\030\051" +
    "\026\052\007\053\056\001\002\000\056\002\ufff5\005\ufff5" +
    "\006\ufff5\014\ufff5\015\ufff5\021\ufff5\026\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\050\ufff5\051\ufff5\052\ufff5\053" +
    "\ufff5\001\002\000\044\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\015\057\017\uffda\023\uffda\024" +
    "\uffda\025\uffda\044\uffda\045\uffda\046\uffda\047\uffda\053\uffdf" +
    "\001\002\000\100\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\022\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\034\uffc3\035\uffc3\037\uffc3\040\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\001\002\000\100\004\uffc7\005\uffc7\006\uffc7\007\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7\016\uffc7\022" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\034\uffc7\035\uffc7\037\uffc7\040\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\001\002\000\100\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\012\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\022\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\034\uffc6\035\uffc6\037\uffc6\040\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\001\002\000\100\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\034\uffcb\035\uffcb\037\uffcb\040\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\001\002\000\100\004\uffce\005\uffce\006" +
    "\uffce\007\125\010\124\011\uffce\012\uffce\014\uffce\015\uffce" +
    "\016\uffce\022\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\034\uffce\035\uffce\037\uffce\040\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051" +
    "\uffce\052\uffce\053\uffce\001\002\000\074\004\uffd3\005\115" +
    "\006\116\011\uffd3\012\uffd3\014\uffd3\015\uffd3\016\uffd3\022" +
    "\uffd3\024\114\025\117\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\034\uffd3\035\uffd3\037\uffd3\040\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3" +
    "\053\uffd3\001\002\000\020\004\113\011\071\012\072\044" +
    "\066\045\065\046\067\047\070\001\002\000\056\002\ufff7" +
    "\005\ufff7\006\ufff7\014\ufff7\015\ufff7\021\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\031\ufff7\032\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\041\ufff7\042\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\001\002\000\056\002\ufff6\005\ufff6\006\ufff6" +
    "\014\ufff6\015\ufff6\021\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\041\ufff6\042\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\001" +
    "\002\000\006\020\uffe1\053\uffe1\001\002\000\056\002\ufffd" +
    "\005\ufffd\006\ufffd\014\ufffd\015\ufffd\021\ufffd\026\ufffd\027" +
    "\ufffd\030\ufffd\031\ufffd\032\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\037\ufffd\040\ufffd\041\ufffd\042\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\001\002\000\056\002\ufff8\005\ufff8\006\ufff8" +
    "\014\ufff8\015\ufff8\021\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8" +
    "\041\ufff8\042\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\001" +
    "\002\000\004\053\103\001\002\000\004\004\102\001\002" +
    "\000\056\002\ufffa\005\ufffa\006\ufffa\014\ufffa\015\ufffa\021" +
    "\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\001\002\000\056\002\ufffc" +
    "\005\ufffc\006\ufffc\014\ufffc\015\ufffc\021\ufffc\026\ufffc\027" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\042\ufffc\050\ufffc\051\ufffc\052" +
    "\ufffc\053\ufffc\001\002\000\040\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\012\uffc1\017\052\023\051\024" +
    "\uffc1\025\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\001\002" +
    "\000\046\002\001\005\023\006\015\014\010\015\014\026" +
    "\016\027\020\030\006\031\017\032\037\034\013\035\021" +
    "\037\042\040\012\050\030\051\026\052\007\053\025\001" +
    "\002\000\056\002\ufffe\005\ufffe\006\ufffe\014\ufffe\015\ufffe" +
    "\021\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\034" +
    "\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\053\ufffe\001\002\000\004\053" +
    "\101\001\002\000\004\013\053\001\002\000\024\005\023" +
    "\006\015\014\010\015\014\026\016\050\030\051\026\052" +
    "\007\053\056\001\002\000\020\004\uffdc\011\071\012\072" +
    "\044\066\045\065\046\067\047\070\001\002\000\102\004" +
    "\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\014\uffc1\015\uffc1\016\uffc1\022\uffc1\023\051\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\034\uffc1" +
    "\035\uffc1\037\uffc1\040\uffc1\043\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\001\002" +
    "\000\102\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011" +
    "\uffda\012\uffda\014\uffda\015\057\016\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\034\uffda\035\uffda\037\uffda\040\uffda\043\uffda\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053" +
    "\uffda\001\002\000\024\005\023\006\015\014\010\015\014" +
    "\026\016\050\030\051\026\052\007\053\056\001\002\000" +
    "\022\011\071\012\072\016\uffdd\022\uffdd\044\066\045\065" +
    "\046\067\047\070\001\002\000\006\016\063\022\062\001" +
    "\002\000\024\005\023\006\015\014\010\015\014\026\016" +
    "\050\030\051\026\052\007\053\056\001\002\000\100\004" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\022\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\034\uffc0\035\uffc0" +
    "\037\uffc0\040\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\001\002\000\022" +
    "\011\071\012\072\016\uffde\022\uffde\044\066\045\065\046" +
    "\067\047\070\001\002\000\024\005\023\006\015\014\010" +
    "\015\014\026\016\050\030\051\026\052\007\053\056\001" +
    "\002\000\024\005\023\006\015\014\010\015\014\026\016" +
    "\050\030\051\026\052\007\053\056\001\002\000\024\005" +
    "\023\006\015\014\010\015\014\026\016\050\030\051\026" +
    "\052\007\053\056\001\002\000\024\005\023\006\015\014" +
    "\010\015\014\026\016\050\030\051\026\052\007\053\056" +
    "\001\002\000\024\005\023\006\015\014\010\015\014\026" +
    "\016\050\030\051\026\052\007\053\056\001\002\000\024" +
    "\005\023\006\015\014\010\015\014\026\016\050\030\051" +
    "\026\052\007\053\056\001\002\000\070\004\uffd8\005\uffd8" +
    "\006\uffd8\011\uffd8\012\uffd8\014\uffd8\015\uffd8\016\uffd8\022" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\034\uffd8" +
    "\035\uffd8\037\uffd8\040\uffd8\043\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\001\002" +
    "\000\070\004\uffd9\005\uffd9\006\uffd9\011\uffd9\012\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\022\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\034\uffd9\035\uffd9\037\uffd9\040\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\053\uffd9\001\002\000\070\004\uffd4\005\uffd4\006" +
    "\uffd4\011\uffd4\012\uffd4\014\uffd4\015\uffd4\016\uffd4\022\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\034\uffd4\035" +
    "\uffd4\037\uffd4\040\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\001\002\000" +
    "\070\004\uffd5\005\uffd5\006\uffd5\011\uffd5\012\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\022\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\034\uffd5\035\uffd5\037\uffd5\040\uffd5\043\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\001\002\000\070\004\uffd6\005\uffd6\006\uffd6" +
    "\011\uffd6\012\uffd6\014\uffd6\015\uffd6\016\uffd6\022\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\034\uffd6\035\uffd6" +
    "\037\uffd6\040\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\001\002\000\070" +
    "\004\uffd7\005\uffd7\006\uffd7\011\uffd7\012\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\022\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\034\uffd7\035\uffd7\037\uffd7\040\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\001\002\000\104\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\034\uffdb\035\uffdb\037\uffdb" +
    "\040\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\001\002\000\056\002\ufff4" +
    "\005\ufff4\006\ufff4\014\ufff4\015\ufff4\021\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\041\ufff4\042\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\001\002\000\004\020\104\001\002\000\014" +
    "\027\020\030\006\031\017\032\037\053\105\001\002\000" +
    "\006\020\uffdf\053\uffdf\001\002\000\004\004\111\001\002" +
    "\000\004\021\110\001\002\000\056\002\uffee\005\uffee\006" +
    "\uffee\014\uffee\015\uffee\021\uffee\026\uffee\027\uffee\030\uffee" +
    "\031\uffee\032\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\042\uffee\050\uffee\051\uffee\052\uffee\053\uffee" +
    "\001\002\000\016\021\uffec\027\020\030\006\031\017\032" +
    "\037\053\105\001\002\000\004\021\uffed\001\002\000\056" +
    "\002\ufff3\005\ufff3\006\ufff3\014\ufff3\015\ufff3\021\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\034\ufff3\035\ufff3" +
    "\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\001\002\000\024\005\023\006\015" +
    "\014\010\015\014\026\016\050\030\051\026\052\007\053" +
    "\056\001\002\000\024\005\023\006\015\014\010\015\014" +
    "\026\016\050\030\051\026\052\007\053\056\001\002\000" +
    "\024\005\023\006\015\014\010\015\014\026\016\050\030" +
    "\051\026\052\007\053\056\001\002\000\024\005\023\006" +
    "\015\014\010\015\014\026\016\050\030\051\026\052\007" +
    "\053\056\001\002\000\074\004\uffd0\005\115\006\116\011" +
    "\uffd0\012\uffd0\014\uffd0\015\uffd0\016\uffd0\022\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\034" +
    "\uffd0\035\uffd0\037\uffd0\040\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\001" +
    "\002\000\074\004\uffd1\005\uffd1\006\uffd1\011\uffd1\012\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\022\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\034\uffd1\035\uffd1" +
    "\037\uffd1\040\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\001\002\000\074" +
    "\004\uffd2\005\uffd2\006\uffd2\011\uffd2\012\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\022\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\034\uffd2\035\uffd2\037\uffd2\040" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\053\uffd2\001\002\000\074\004\uffcf\005" +
    "\115\006\116\011\uffcf\012\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\022\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\034\uffcf\035\uffcf\037\uffcf\040\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\001\002\000\024\005\023\006\015\014\010" +
    "\015\014\026\016\050\030\051\026\052\007\053\056\001" +
    "\002\000\024\005\023\006\015\014\010\015\014\026\016" +
    "\050\030\051\026\052\007\053\056\001\002\000\100\004" +
    "\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\022\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\034\uffcd\035\uffcd" +
    "\037\uffcd\040\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\001\002\000\100" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\022\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\034\uffcc\035" +
    "\uffcc\037\uffcc\040\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\001\002\000" +
    "\100\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\012\uffc8\014\uffc8\015\uffc8\016\uffc8\022\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\034\uffc8" +
    "\035\uffc8\037\uffc8\040\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\001\002" +
    "\000\056\002\ufff9\005\ufff9\006\ufff9\014\ufff9\015\ufff9\021" +
    "\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\034\ufff9" +
    "\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\050" +
    "\ufff9\051\ufff9\052\ufff9\053\ufff9\001\002\000\060\005\023" +
    "\006\015\011\071\012\072\014\010\015\014\026\016\027" +
    "\020\030\006\031\017\032\037\034\013\035\021\037\042" +
    "\040\012\044\066\045\065\046\067\047\070\050\030\051" +
    "\026\052\007\053\025\001\002\000\046\005\023\006\015" +
    "\014\010\015\014\026\016\027\020\030\006\031\017\032" +
    "\037\034\013\035\021\036\134\037\042\040\012\050\030" +
    "\051\026\052\007\053\025\001\002\000\056\002\uffe4\005" +
    "\uffe4\006\uffe4\014\uffe4\015\uffe4\021\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\042\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\001\002\000\100\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\022\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\034\uffc9\035\uffc9\037\uffc9\040\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\001\002\000\100\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\uffca\012\uffca\014\uffca\015\uffca\016" +
    "\uffca\022\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\034\uffca\035\uffca\037\uffca\040\uffca\043" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca" +
    "\052\uffca\053\uffca\001\002\000\020\011\071\012\072\016" +
    "\140\044\066\045\065\046\067\047\070\001\002\000\100" +
    "\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\022\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\034\uffc5\035" +
    "\uffc5\037\uffc5\040\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\001\002\000" +
    "\004\015\142\001\002\000\016\016\uffe9\027\020\030\006" +
    "\031\017\032\037\053\105\001\002\000\006\016\uffea\022" +
    "\155\001\002\000\004\053\154\001\002\000\004\016\146" +
    "\001\002\000\004\033\147\001\002\000\014\027\020\030" +
    "\006\031\017\032\037\053\105\001\002\000\004\020\151" +
    "\001\002\000\044\005\023\006\015\014\010\015\014\026" +
    "\016\027\020\030\006\031\017\032\037\034\013\035\021" +
    "\037\042\040\012\050\030\051\026\052\007\053\025\001" +
    "\002\000\046\005\023\006\015\014\010\015\014\021\153" +
    "\026\016\027\020\030\006\031\017\032\037\034\013\035" +
    "\021\037\042\040\012\050\030\051\026\052\007\053\025" +
    "\001\002\000\056\002\uffeb\005\uffeb\006\uffeb\014\uffeb\015" +
    "\uffeb\021\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\001\002\000\006" +
    "\016\uffe7\022\uffe7\001\002\000\014\027\020\030\006\031" +
    "\017\032\037\053\105\001\002\000\004\053\157\001\002" +
    "\000\006\016\uffe8\022\uffe8\001\002\000\020\011\071\012" +
    "\072\043\161\044\066\045\065\046\067\047\070\001\002" +
    "\000\044\005\023\006\015\014\010\015\014\026\016\027" +
    "\020\030\006\031\017\032\037\034\013\035\021\037\042" +
    "\040\012\050\030\051\026\052\007\053\025\001\002\000" +
    "\050\005\023\006\015\014\010\015\014\026\016\027\020" +
    "\030\006\031\017\032\037\034\013\035\021\037\042\040" +
    "\012\041\163\042\164\050\030\051\026\052\007\053\025" +
    "\001\002\000\044\005\023\006\015\014\010\015\014\026" +
    "\016\027\020\030\006\031\017\032\037\034\013\035\021" +
    "\037\042\040\012\050\030\051\026\052\007\053\025\001" +
    "\002\000\056\002\uffe6\005\uffe6\006\uffe6\014\uffe6\015\uffe6" +
    "\021\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\053\uffe6\001\002\000\046\005" +
    "\023\006\015\014\010\015\014\026\016\027\020\030\006" +
    "\031\017\032\037\034\013\035\021\037\042\040\012\042" +
    "\166\050\030\051\026\052\007\053\025\001\002\000\056" +
    "\002\uffe5\005\uffe5\006\uffe5\014\uffe5\015\uffe5\021\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\050\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\001\002\000\004\002\000\001\002" +
    "\000\010\004\uffef\017\174\022\uffef\001\002\000\006\004" +
    "\ufff1\022\172\001\002\000\004\053\173\001\002\000\006" +
    "\004\ufff0\022\ufff0\001\002\000\004\013\175\001\002\000" +
    "\024\005\023\006\015\014\010\015\014\026\016\050\030" +
    "\051\026\052\007\053\056\001\002\000\020\004\ufff2\011" +
    "\071\012\072\044\066\045\065\046\067\047\070\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\050\002\010\003\046\004\037\005\044\006" +
    "\004\007\043\010\042\011\035\012\003\013\021\014\040" +
    "\016\023\020\034\022\045\025\033\026\032\027\031\030" +
    "\030\031\026\001\001\000\004\015\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\022\054\025\157\026\032" +
    "\027\031\030\030\031\026\001\001\000\002\001\001\000" +
    "\016\022\054\025\136\026\032\027\031\030\030\031\026" +
    "\001\001\000\006\022\054\031\135\001\001\000\006\022" +
    "\054\031\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\054\025\131\026\032\027\031\030\030\031" +
    "\026\001\001\000\002\001\001\000\006\022\054\031\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\047\005\044\006\004\007\043\010\042\011" +
    "\035\012\003\013\021\014\040\016\023\020\034\022\045" +
    "\025\033\026\032\027\031\030\030\031\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\054\025\053\026\032\027\031\030\030\031\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\021\060\022\054\025\057\026\032\027\031\030" +
    "\030\031\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\054\025\063\026\032\027\031\030\030\031" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\054\025\077\026\032\027\031\030\030\031\026\001" +
    "\001\000\016\022\054\025\076\026\032\027\031\030\030" +
    "\031\026\001\001\000\016\022\054\025\075\026\032\027" +
    "\031\030\030\031\026\001\001\000\016\022\054\025\074" +
    "\026\032\027\031\030\030\031\026\001\001\000\016\022" +
    "\054\025\073\026\032\027\031\030\030\031\026\001\001" +
    "\000\016\022\054\025\072\026\032\027\031\030\030\031" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\003\013\105\017\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\003\013\105\017\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\022\054\026\122\027\031" +
    "\030\030\031\026\001\001\000\014\022\054\026\121\027" +
    "\031\030\030\031\026\001\001\000\014\022\054\026\120" +
    "\027\031\030\030\031\026\001\001\000\014\022\054\026" +
    "\117\027\031\030\030\031\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\054\027\126\030\030\031\026\001\001\000\012" +
    "\022\054\027\125\030\030\031\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\003\132\004\037\005\044\006\004\007\043\010" +
    "\042\011\035\012\003\013\021\014\040\016\023\020\034" +
    "\022\045\025\033\026\032\027\031\030\030\031\026\001" +
    "\001\000\044\004\047\005\044\006\004\007\043\010\042" +
    "\011\035\012\003\013\021\014\040\016\023\020\034\022" +
    "\045\025\033\026\032\027\031\030\030\031\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\143\023\144\024\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\147\001\001\000\002\001\001\000\046\003\151\004" +
    "\037\005\044\006\004\007\043\010\042\011\035\012\003" +
    "\013\021\014\040\016\023\020\034\022\045\025\033\026" +
    "\032\027\031\030\030\031\026\001\001\000\044\004\047" +
    "\005\044\006\004\007\043\010\042\011\035\012\003\013" +
    "\021\014\040\016\023\020\034\022\045\025\033\026\032" +
    "\027\031\030\030\031\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\161\004" +
    "\037\005\044\006\004\007\043\010\042\011\035\012\003" +
    "\013\021\014\040\016\023\020\034\022\045\025\033\026" +
    "\032\027\031\030\030\031\026\001\001\000\044\004\047" +
    "\005\044\006\004\007\043\010\042\011\035\012\003\013" +
    "\021\014\040\016\023\020\034\022\045\025\033\026\032" +
    "\027\031\030\030\031\026\001\001\000\046\003\164\004" +
    "\037\005\044\006\004\007\043\010\042\011\035\012\003" +
    "\013\021\014\040\016\023\020\034\022\045\025\033\026" +
    "\032\027\031\030\030\031\026\001\001\000\002\001\001" +
    "\000\044\004\047\005\044\006\004\007\043\010\042\011" +
    "\035\012\003\013\021\014\040\016\023\020\034\022\045" +
    "\025\033\026\032\027\031\030\030\031\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\022\054\025\175\026\032\027\031\030\030" +
    "\031\026\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("prueba/vacio.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

  protected Lexer lexer;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= blq_sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // blq_sentencias ::= blq_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blq_sentencias",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // blq_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blq_sentencias",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= sent_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= sent_uso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= sent_flujo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent_decl ::= decl_variable SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent_decl ::= decl_struct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent_decl ::= decl_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent_flujo ::= condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_flujo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent_flujo ::= bucle 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_flujo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sent_uso ::= asignacion SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_uso",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sent_uso ::= dec_exp_n1 SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_uso",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decl_variable ::= keytipo ID DPTOS IGUAL dec_exp_n1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decl_variable ::= keytipo identificado 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // identificado ::= identificado COMA ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identificado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // identificado ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identificado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decl_struct ::= STRUCT ID LCORCH lista_struct RCORCH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_struct",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_struct ::= decl_variable SEMI lista_struct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_struct",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_struct ::= decl_variable SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_struct",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // decl_funcion ::= FUNCION ID LPAREN identificado_funcion RPAREN RETURN keytipo LCORCH blq_sentencias RCORCH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_funcion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // identificado_funcion ::= declaradores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identificado_funcion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // identificado_funcion ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identificado_funcion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaradores ::= declaradores COMA keytipo ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaradores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaradores ::= keytipo ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaradores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicional ::= SI dec_exp_n1 ENTONCES blq_sentencias FINSI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicional ::= SI dec_exp_n1 ENTONCES blq_sentencias SINO blq_sentencias FINSI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bucle ::= MIENTRAS dec_exp_n1 blq_sentencias FINMIENTRAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bucle",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // keytipo ::= DENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keytipo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // keytipo ::= DREAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keytipo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // keytipo ::= DBOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keytipo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // keytipo ::= DCARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keytipo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // keytipo ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keytipo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lexp ::= lexp COMA dec_exp_n1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lexp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lexp ::= dec_exp_n1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lexp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // asignacion ::= type_struct DPTOS IGUAL dec_exp_n1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_struct ::= type_struct PUNTO ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_struct",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_struct ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_struct",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dec_exp_n1 ::= dec_exp_n1 MENOR dec_exp_n1 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dec_exp_n1 ::= dec_exp_n1 MAYOR dec_exp_n1 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec_exp_n1 ::= dec_exp_n1 MAYORIGUAL dec_exp_n1 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dec_exp_n1 ::= dec_exp_n1 MENORIGUAL dec_exp_n1 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dec_exp_n1 ::= dec_exp_n1 IGUALIGUAL dec_exp_n1 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dec_exp_n1 ::= dec_exp_n1 NOTIGUAL dec_exp_n1 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec_exp_n1 ::= dec_exp_n2 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec_exp_n2 ::= dec_exp_n2 PLUS dec_exp_n2 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_exp_n2 ::= dec_exp_n2 MINUS dec_exp_n2 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dec_exp_n2 ::= dec_exp_n2 OR dec_exp_n2 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dec_exp_n2 ::= dec_exp_n2 AND dec_exp_n2 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dec_exp_n2 ::= dec_exp_n3 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dec_exp_n3 ::= dec_exp_n3 TIMES dec_exp_n3 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n3",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dec_exp_n3 ::= dec_exp_n3 DIV dec_exp_n3 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n3",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dec_exp_n3 ::= dec_exp_n4 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n3",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dec_exp_n4 ::= MINUS dec_exp_n5 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n4",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dec_exp_n4 ::= NOT dec_exp_n5 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n4",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dec_exp_n4 ::= PLUS dec_exp_n5 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n4",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dec_exp_n4 ::= dec_exp_n5 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n4",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dec_exp_n5 ::= NUMBER 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dec_exp_n5 ::= LPAREN dec_exp_n1 RPAREN 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dec_exp_n5 ::= UMINUS 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dec_exp_n5 ::= BOOLEAN 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dec_exp_n5 ::= CHAR 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dec_exp_n5 ::= type_struct 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // dec_exp_n5 ::= ID LPAREN lexp RPAREN 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_exp_n5",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
