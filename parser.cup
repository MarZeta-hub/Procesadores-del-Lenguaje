

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input2.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, TIMES, DIV, MENOR, MAYOR, IGUAL,UMINUS,
					LPAREN, RPAREN, DPTOS, LCORCH, RCORCH, COMA, AND, OR, NOT,
                    DENTERO, DREAL, DCARACTER, DBOOLEAN, 
                    RETURN, FUNCION, MIENTRAS, FINMIENTRAS, STRUCT, SI, SINO, FINSI, ENTONCES ;
terminal Double 	NUMBER;
terminal Boolean    BOOLEAN;
terminal char       CHAR;
terminal String     ID;

/* Non terminals */
non terminal            inicio;
non terminal Double     expr_arit;      // used to store evaluated subexpressions
non terminal Boolean    expr_log;
non terminal            declarar;
non terminal            cambiarvalor;
non terminal 			entero;
non terminal 			de_enteros;
non terminal            real;
non terminal            de_real;
non terminal            caracter;
non terminal            de_caracter;
non terminal            buleano;
non terminal            de_buleano;

/* Precedences */
precedence left NOT;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, AND, OR;
precedence left UMINUS;


/* The grammar rules */
//REGLAS DE INICIO, ACTUALMENTE SOLO DECLARACION DE VARIABLES Y CAMBIO DE VALOR
inicio        ::= inicio declarar SEMI
                | declarar SEMI
                | inicio cambiarvalor SEMI
                | cambiarvalor SEMI
                ;
                
//PARA DECLARAR UNA NUEVA VARIABLE SEGUN SU TIPO		  						
declarar      ::= DENTERO   entero
			    | DREAL     real
			    | DCARACTER caracter
			    | DBOOLEAN  buleano
			    ;     
       
entero        ::= ID DPTOS IGUAL expr_arit:e {: System.out.println(e); :}
				| de_enteros      
				;
				
de_enteros    ::= ID COMA de_enteros
				| ID
				;
				
real          ::= ID DPTOS IGUAL expr_arit:e {: System.out.println(e); :}
				| de_real
				;
				
de_real       ::= ID COMA de_real
				| ID
				;

caracter      ::= ID DPTOS IGUAL CHAR 
				| de_caracter
				;
				
de_caracter   ::= ID COMA de_caracter
				| ID
				;

buleano       ::= ID DPTOS IGUAL expr_log:e 
				| de_buleano
				;
				
de_buleano    ::= ID COMA de_buleano
				| ID
				;
				
//PARA CAMBIAR EL VALOR DE UNA VARIABLE       
cambiarvalor  ::= ID DPTOS IGUAL expr_arit:e 
                | ID DPTOS IGUAL expr_log:e  
                | ID DPTOS IGUAL CHAR 
		        ;	
		        	
// CALCULOS SOBRE VALORES ARITMETICOS           	
expr_arit     ::= expr_arit:e1 PLUS  expr_arit:e2   {: RESULT = e1+e2; :}
                | expr_arit:e1 MINUS expr_arit:e2   {: RESULT = e1-e2; :}
                | expr_arit:e1 TIMES expr_arit:e2   {: RESULT = e1*e2; :}
                | expr_arit:e1 DIV   expr_arit:e2   {: RESULT = e1/e2; :}
                | MINUS expr_arit:e                 {: RESULT = -e;    :}
                 %prec UMINUS
                | LPAREN expr_arit:e RPAREN	        {: RESULT = e;     :}
                | NUMBER:n	                        {: RESULT = n;     :}
                | ID:n                              {: RESULT = 1.0; :}
                ;

//CALCULOS SOBRE VALORES LOGICOS            
expr_log      ::= expr_arit:e1 MAYOR expr_arit:e2 
				| expr_arit:e1 MENOR expr_arit:e2 
				| expr_arit:e1 MAYOR IGUAL expr_arit:e2
				| expr_arit:e1 MENOR IGUAL expr_arit:e2
				| expr_arit:e1 IGUAL IGUAL expr_arit:e2
				| NOT expr_log:e
				| expr_log:e1 AND expr_log:e2
				| expr_log:e1 OR expr_log:e2
                | BOOLEAN:n							{: RESULT = n; :}
                //| ID
			    ;
